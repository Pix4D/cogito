# Install `task` from https://taskfile.dev
# Run `task --list` to start.

version: "3"

vars:
  DATE: '{{ now | date "2006-01-02" }}'
  REPO: github.com/Pix4D/cogito
  COMMIT:
    sh: git log -n 1 --format=%h
  DOCKER_ORG: '{{default "pix4d" .DOCKER_ORG}}'
  DOCKER_IMAGE: cogito
  DOCKER_TAG:
    sh: ci/git-branch-or-tag.sh
  IS_RELEASE:
    sh: ci/git-is-release.sh
  DOCKER_BASE_NAME: "{{.DOCKER_ORG}}/{{.DOCKER_IMAGE}}"
  DOCKER_FULL_NAME: "{{.DOCKER_BASE_NAME}}:{{.DOCKER_TAG}}"
  BUILD_INFO: "Tag: {{.DOCKER_TAG}}, commit: {{.COMMIT}}, build date: {{.DATE}}"
  LDFLAGS: -w -X '{{.REPO}}/resource.buildinfo={{.BUILD_INFO}}'
  #
  SMOKE_INPUT: >
    {
      "source": {"owner": "foo", "repo": "bar", "access_token": "123", "log_level": "debug"},
      "version": {"ref": "pizza"}
    }
  #
  GOLANGCI_VERSION: v1.46.0
  GOLINES_VERSION: v0.9.0

tasks:

  install:deps:
    desc: Install tool dependencies.
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCI_VERSION}}
      - go install github.com/segmentio/golines@{{.GOLINES_VERSION}}

  lint:
    desc: Lint the code.
    cmds:
      - golangci-lint run ./...

  lint:linelength:
    desc: Enforce max line length. Use the tool output only as a hint, sometimes it makes wrong decisions.
    cmds:
      - golines --max-len=99 --write-output .

  test:env:
    desc: "Run what is passed on the command-line with a shell environment containing the secrets needed for the integration tests. Example: task test:env -- go test -count=1 -run 'TestFooIntegration' ./pkg/update"
    cmds:
      - '{{ .CLI_ARGS }}'
    env: &test-env
      COGITO_TEST_COMMIT_SHA: '{{default "32e4b4f91bb8de500f6a7aa2011f93c3f322381c" .COGITO_TEST_COMMIT_SHA}}'
      COGITO_TEST_OAUTH_TOKEN:
        sh: 'echo {{default "$(gopass show cogito/test_oauth_token)" .COGITO_TEST_OAUTH_TOKEN}}'
      COGITO_TEST_REPO_NAME: '{{default "cogito-test-read-write" .COGITO_TEST_REPO_NAME}}'
      COGITO_TEST_REPO_OWNER: '{{default "pix4d" .COGITO_TEST_REPO_OWNER}}'
      COGITO_TEST_GCHAT_HOOK:
        sh: 'echo {{default "$(gopass show cogito/test_gchat_webhook)" .COGITO_TEST_GCHAT_HOOK}}'

  test:unit:
    desc: Run the unit tests.
    cmds:
      # One day I will understand how to use -coverpkg=./... :-(
      - go test -count=1 -short -coverprofile=coverage.out ./...

  test:all:
    desc: Run all the tests (unit + integration). Use this target to get total coverage.
    cmds:
      - go test -count=1 -coverprofile=coverage.out ./...
    env: *test-env

  test:smoke:
    desc: Simple smoke test of the local executables.
    cmds:
      - echo '{{.SMOKE_INPUT}}' | ./bin/check
      - echo
      - echo '{{.SMOKE_INPUT}}' | ./bin/in dummy-dir
      - echo

  browser:
    desc: "Show code coverage in browser (usage: task test:<subtarget> browser)"
    cmds:
      - go tool cover -html=coverage.out

  build:
    desc: Build on the local machine.
    dir: bin
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" ../cmd/cogito
      - go build -ldflags "{{.LDFLAGS}}" ../cmd/out
      - go build -ldflags "{{.LDFLAGS}}" ../cmd/hello
      - ln -sf cogito check
      - ln -sf cogito in

  build:copydir:
    desc: Build copydir (development helper, normally not needed).
    dir: bin
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" ../cmd/copydir

  clean:
    desc: Delete build artifacts
    cmds:
      - rm -f coverage.out

  docker:login:
    cmds:
      - echo $DOCKER_TOKEN | docker login -u $DOCKER_USERNAME --password-stdin
    env:
      DOCKER_USERNAME:
        sh: 'echo {{default "$(gopass show cogito/docker_username)" .DOCKER_USERNAME}}'
      DOCKER_TOKEN:
        sh: 'echo {{default "$(gopass show cogito/docker_token)" .DOCKER_TOKEN}}'

  docker:build:
    desc: Build the Docker image.
    cmds:
      - docker build --build-arg BUILD_INFO --tag {{.DOCKER_FULL_NAME}} .
    env:
      BUILD_INFO: "{{.BUILD_INFO}}"

  docker:smoke:
    desc: Simple smoke test of the Docker image.
    cmds:
      - echo '{{.SMOKE_INPUT}}' | docker run --rm --interactive {{.DOCKER_FULL_NAME}} /opt/resource/check
      - echo
      - echo '{{.SMOKE_INPUT}}' | docker run --rm --interactive {{.DOCKER_FULL_NAME}} /opt/resource/in dummy-dir
      - echo

  docker:push:
    desc: Push the Docker image.
    cmds:
      - docker push {{.DOCKER_FULL_NAME}}
    preconditions:
      - sh: test -z "$IS_RELEASE" || test -n "$CI"
        msg: Release tag detected ({{.DOCKER_TAG}}); releases are made only on CI.

  docker:maybe-push-release:
    desc: If a release tag has been detected, Docker push with the 'latest' tag.
    cmds:
      - docker tag {{.DOCKER_FULL_NAME}} {{.DOCKER_BASE_NAME}}:latest
      - docker push {{.DOCKER_BASE_NAME}}:latest
    preconditions:
      - sh: test -n "$CI"
        msg: This target must run only on CI, not locally.
    status:
      - test -z "{{.IS_RELEASE}}"

  ci:setup:
    desc: Useful only when running under CI.
    cmds:
      - task: install:deps
      # Running "go mod download" is optional, since "go build" would do it anyway.
      # We run it explicitly to make the output of "go build" more focused.
      - cmd: go mod download -x

  # When using GitHub Actions, add this snippet at the end of the workflow:
  #    - run: docker logout
  #    # Always remove credentials, also if any previous step failed.
  #    if: always()
  ci:teardown:
    desc: ALWAYS run this when in CI (reduces security exposures)
    cmds:
      # Remove credentials from the file system, added by "docker login" :-(
      - cmd: docker logout

